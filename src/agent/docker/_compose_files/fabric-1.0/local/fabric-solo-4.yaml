# https://github.com/yeasy/docker-compose-files/tree/master/hyperledger
# This compose file will start a Hyperledger Fabric 1.0 MVE, including
# * 1 ca
# * 1 orderer
# * 4 peers in 2 orgs
# * cli for testing

version: '2.0'

services:
 # ca.org1.example.com:
 #   image: hyperledger/fabric-ca
 #   container_name: ${COMPOSE_PROJECT_NAME}_fabric-ca
 #   hostname: ca
 #  command: /go/src/github.com/hyperledger/fabric-ca/bin/ca server start -ca testdata/ec.pem -ca-key testdata/ec-key.pem -config testdata/testconfig.json
 #   expose:
 #     - "7054"
 #   command: fabric-ca-server start -b admin:adminpw

  ca.org1.example.com:
    image: hyperledger/fabric-ca
    container_name: ${COMPOSE_PROJECT_NAME}_fabric-ca-org1
    hostname: ca.org1.example.com
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca.org1.example.com
      - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org1.example.com-cert.pem
      - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/ca.org1.example.com-key.pem
    expose:
      - "7054"
    volumes:
       - ${COMPOSE_PROJECT_PATH}/crypto-config/peerOrganizations/org1.example.com/ca/:/etc/hyperledger/fabric-ca-server-config
    command: fabric-ca-server start -b admin:adminpw

  ca.org2.example.com:
    image: hyperledger/fabric-ca
    container_name: ${COMPOSE_PROJECT_NAME}_fabric-ca-org2
    hostname: ca.org2.example.com
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca.org2.example.com
      - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org2.example.com-cert.pem
      - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/ca.org2.example.com-key.pem
    expose:
      - "7054"
    volumes:
       - ${COMPOSE_PROJECT_PATH}/crypto-config/peerOrganizations/org2.example.com/ca/:/etc/hyperledger/fabric-ca-server-config
    command: fabric-ca-server start -b admin:adminpw

  orderer.example.com:  # There  can be multiple orderers
    container_name: ${COMPOSE_PROJECT_NAME}_orderer  # mongo does not allow dot in name
    extends:
      file: docker-compose-base.yaml
      service: orderer.example.com

  peer0.org1.example.com:
    container_name: ${COMPOSE_PROJECT_NAME}_peer0-org1
    extends:
      file: docker-compose-base.yaml
      service: peer0.org1.example.com

  peer1.org1.example.com:
    container_name: ${COMPOSE_PROJECT_NAME}_peer1-org1
    extends:
      file: docker-compose-base.yaml
      service: peer1.org1.example.com

  peer0.org2.example.com:
    container_name: ${COMPOSE_PROJECT_NAME}_peer0-org2
    extends:
      file: docker-compose-base.yaml
      service: peer0.org2.example.com

  peer1.org2.example.com:
    container_name: ${COMPOSE_PROJECT_NAME}_peer1-org2
    extends:
      file: docker-compose-base.yaml
      service: peer1.org2.example.com

  cli:
    container_name: ${COMPOSE_PROJECT_NAME}_fabric-cli
    hostname: fabric-cli
    image: hyperledger/fabric-tools
    tty: true
    environment:
      - CORE_PEER_ID=fabric-cli
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051 # default to operate on peer0.org1
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_TLS_ENABLED=true  # to disenable TLS, change to False
      - CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
    volumes:
        - ${COMPOSE_PROJECT_PATH}/chaincode:/opt/gopath/src/github.com/hyperledger/fabric/examples/chaincode
        - ${COMPOSE_PROJECT_PATH}/crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/
        - ${COMPOSE_PROJECT_PATH}/scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/
        - ${COMPOSE_PROJECT_PATH}/channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
        #- ${COMPOSE_PROJECT_PATH}/configtx.yaml:/etc/hyperledger/fabric/configtx.yaml
        #- ${COMPOSE_PROJECT_PATH}/crypto-config.yaml:/etc/hyperledger/fabric/crypto-config.yaml
    depends_on:
      - orderer.example.com
      - peer0.org1.example.com
      - peer1.org1.example.com
      - peer0.org2.example.com
      - peer1.org2.example.com
    links:
      - orderer.example.com
      - peer0.org1.example.com
      - peer1.org1.example.com
      - peer0.org2.example.com
      - peer1.org2.example.com
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: bash -c 'sleep 2; bash ./scripts/initialize.sh; while true; do sleep 20170504; done'

  explorer:
    image: yeasy/blockchain-explorer:latest
    container_name: ${COMPOSE_PROJECT_NAME}_explorer
    hostname: explorer
    volumes:
      - ${COMPOSE_PROJECT_PATH}/explorer-artifacts/log.log:/blockchain-explorer/log.log
      - ${COMPOSE_PROJECT_PATH}/explorer-artifacts/config.json:/blockchain-explorer/config.json
      - ${COMPOSE_PROJECT_PATH}/explorer-artifacts/network-config-tls.json:/blockchain-explorer/app/network-config-tls.json
      # change network-config-tls.json to network-config.json while disabling TLS
      - ${COMPOSE_PROJECT_PATH}/crypto-config:/blockchain-explorer/fabric-docker-compose-svt/crypto-config
    ports:
      - "${EXPLORER_PORT}:8080"  # HTTP port
    depends_on:
      - mysql
      - orderer.example.com
      - peer0.org1.example.com
      - peer1.org1.example.com
      - peer0.org2.example.com
      - peer1.org2.example.com
    links:
      - orderer.example.com
      - peer0.org1.example.com
      - peer1.org1.example.com
      - peer0.org2.example.com
      - peer1.org2.example.com
    command: bash -c 'node main.js 2>&1'

  mysql: # mysql service
    image: mysql:5.7
    container_name: ${COMPOSE_PROJECT_NAME}_mysql
    hostname: mysql
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=fabricexplorer
      - STARTUP_SQL=/fabricexplorer.sql
    volumes:
      - ${COMPOSE_PROJECT_PATH}/explorer-artifacts/fabricexplorer.sql:/docker-entrypoint-initdb.d/fabricexplorer.sql
    expose:
      - "3306"
    command: mysqld



networks:
  default:
    external:
      name: ${CLUSTER_NETWORK}
