// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"./pkg/apis/fabric/v1alpha1.CA":           schema_pkg_apis_fabric_v1alpha1_CA(ref),
		"./pkg/apis/fabric/v1alpha1.CACerts":      schema_pkg_apis_fabric_v1alpha1_CACerts(ref),
		"./pkg/apis/fabric/v1alpha1.CASpec":       schema_pkg_apis_fabric_v1alpha1_CASpec(ref),
		"./pkg/apis/fabric/v1alpha1.ConfigParam":  schema_pkg_apis_fabric_v1alpha1_ConfigParam(ref),
		"./pkg/apis/fabric/v1alpha1.MSPCerts":     schema_pkg_apis_fabric_v1alpha1_MSPCerts(ref),
		"./pkg/apis/fabric/v1alpha1.NodeSpec":     schema_pkg_apis_fabric_v1alpha1_NodeSpec(ref),
		"./pkg/apis/fabric/v1alpha1.NodeStatus":   schema_pkg_apis_fabric_v1alpha1_NodeStatus(ref),
		"./pkg/apis/fabric/v1alpha1.Orderer":      schema_pkg_apis_fabric_v1alpha1_Orderer(ref),
		"./pkg/apis/fabric/v1alpha1.OrdererCerts": schema_pkg_apis_fabric_v1alpha1_OrdererCerts(ref),
		"./pkg/apis/fabric/v1alpha1.OrdererSpec":  schema_pkg_apis_fabric_v1alpha1_OrdererSpec(ref),
		"./pkg/apis/fabric/v1alpha1.Peer":         schema_pkg_apis_fabric_v1alpha1_Peer(ref),
		"./pkg/apis/fabric/v1alpha1.PeerCerts":    schema_pkg_apis_fabric_v1alpha1_PeerCerts(ref),
		"./pkg/apis/fabric/v1alpha1.PeerSpec":     schema_pkg_apis_fabric_v1alpha1_PeerSpec(ref),
	}
}

func schema_pkg_apis_fabric_v1alpha1_CA(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CA is the Schema for the cas API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fabric/v1alpha1.CASpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fabric/v1alpha1.NodeStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/fabric/v1alpha1.CASpec", "./pkg/apis/fabric/v1alpha1.NodeStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_fabric_v1alpha1_CACerts(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CACerts defines the desired state of CA",
				Properties: map[string]spec.Schema{
					"cert": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"key": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"tlsCert": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"tlsKey": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_fabric_v1alpha1_CASpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CASpec defines the desired state of CA",
				Properties: map[string]spec.Schema{
					"admin": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"adminPassword": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"certs": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fabric/v1alpha1.CACerts"),
						},
					},
					"nodeSpec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fabric/v1alpha1.NodeSpec"),
						},
					},
				},
				Required: []string{"admin", "adminPassword"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/fabric/v1alpha1.CACerts", "./pkg/apis/fabric/v1alpha1.NodeSpec"},
	}
}

func schema_pkg_apis_fabric_v1alpha1_ConfigParam(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"value": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"name", "value"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_fabric_v1alpha1_MSPCerts(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"adminCerts": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"caCerts": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"intermediateCerts": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"keyStore": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"signCerts": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"tlsCacerts": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"tlsIntermediatecerts": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"adminCerts", "caCerts", "keyStore", "signCerts"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_fabric_v1alpha1_NodeSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"configParams": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("./pkg/apis/fabric/v1alpha1.ConfigParam"),
									},
								},
							},
						},
					},
					"hosts": {
						SchemaProps: spec.SchemaProps{
							Type: []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"storageClass": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"storageSize": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"image", "configParams"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/fabric/v1alpha1.ConfigParam", "k8s.io/api/core/v1.ResourceRequirements"},
	}
}

func schema_pkg_apis_fabric_v1alpha1_NodeStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeStatus defines the observed state of CA",
				Properties: map[string]spec.Schema{
					"accessPoint": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"accessPoint"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_fabric_v1alpha1_Orderer(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Orderer is the Schema for the orderers API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fabric/v1alpha1.OrdererSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fabric/v1alpha1.NodeStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/fabric/v1alpha1.NodeStatus", "./pkg/apis/fabric/v1alpha1.OrdererSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_fabric_v1alpha1_OrdererCerts(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OrdererCerts defines the desired certificates for Orderer",
				Properties: map[string]spec.Schema{
					"tlsCerts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fabric/v1alpha1.OrdererTLSCerts"),
						},
					},
					"msp": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fabric/v1alpha1.MSPCerts"),
						},
					},
				},
				Required: []string{"tlsCerts", "msp"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/fabric/v1alpha1.MSPCerts", "./pkg/apis/fabric/v1alpha1.OrdererTLSCerts"},
	}
}

func schema_pkg_apis_fabric_v1alpha1_OrdererSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OrdererSpec defines the desired state of Orderer",
				Properties: map[string]spec.Schema{
					"certs": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html",
							Ref:         ref("./pkg/apis/fabric/v1alpha1.OrdererCerts"),
						},
					},
					"nodeSpec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fabric/v1alpha1.NodeSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/fabric/v1alpha1.NodeSpec", "./pkg/apis/fabric/v1alpha1.OrdererCerts"},
	}
}

func schema_pkg_apis_fabric_v1alpha1_Peer(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Peer is the Schema for the peers API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fabric/v1alpha1.PeerSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fabric/v1alpha1.NodeStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/fabric/v1alpha1.NodeStatus", "./pkg/apis/fabric/v1alpha1.PeerSpec", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_fabric_v1alpha1_PeerCerts(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PeerCerts defines the desired certificates for Peer",
				Properties: map[string]spec.Schema{
					"tlsCerts": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fabric/v1alpha1.PeerTLSCerts"),
						},
					},
					"msp": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fabric/v1alpha1.MSPCerts"),
						},
					},
				},
				Required: []string{"tlsCerts", "msp"},
			},
		},
		Dependencies: []string{
			"./pkg/apis/fabric/v1alpha1.MSPCerts", "./pkg/apis/fabric/v1alpha1.PeerTLSCerts"},
	}
}

func schema_pkg_apis_fabric_v1alpha1_PeerSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PeerSpec defines the desired state of Peer",
				Properties: map[string]spec.Schema{
					"certs": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL SPEC FIELDS - desired state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html",
							Ref:         ref("./pkg/apis/fabric/v1alpha1.PeerCerts"),
						},
					},
					"nodeSpec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/fabric/v1alpha1.NodeSpec"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/fabric/v1alpha1.NodeSpec", "./pkg/apis/fabric/v1alpha1.PeerCerts"},
	}
}
