---
- name: Setup and initialize variables
  set_fact:
    fabricworkdir: "/opt/gopath/{{ env }}/fabric"
    fabricpath: "/opt/gopath/{{ env }}/src/github.com/hyperledger/fabric"
    gopath: "/opt/gopath/{{ env }}"
    peers: "{{ [] }}"
    orderers: "{{ [] }}"
    cas: "{{ [] }}"
    kafkas: "{{ [] }}"
    kafkanodes: ""
    zookeepers: "{{ [] }}"
    znodes: ""
    zkparam: ""
    index: 1
    zoo_ids: "{{ {} }}"
    kafka_ids: "{{ {} }}"
    zookeeperls: "{{ [] }}"
    kafkals: "{{ [] }}"
    peerls: "{{ [] }}"
    ordererls: "{{ [] }}"
    cals: "{{ [] }}"
    allpeers: "{{ [] }}"
    clihost: ""
    filterstr: ""

- name: Make sure that working directory exists and clean
  file:
    path: "{{ fabricworkdir }}/run"
    state: "{{ item }}"
    mode: 0775
  with_items:
    - "absent"
    - "directory"

- name: Create component list
  set_fact:
    cals: "{{ cals | default([]) + item.value.cas | default([]) }}"
    ordererls: "{{ ordererls | default([]) + item.value.orderers | default([]) }}"
    peerls: "{{ peerls | default([]) + item.value.peers | default([]) }}"
    zookeeperls: "{{ zookeeperls | default([]) + item.value.zookeepers | default([]) }}"
    kafkals: "{{ kafkals | default([]) + item.value.kafkas | default([]) }}"
  with_dict: "{{ fabric.network }}"

- name: Sort component list
  set_fact:
    zookeeperls: "{{ zookeeperls | sort }}"
    kafkals: "{{ kafkals | sort }}"

- name: Generate zookeeper node list
  set_fact:
    znodes: "{{ znodes }} server.{{ index }}={{ item }}:2888:3888"
    zkparam: "{{ zkparam + item }}:2181 "
    zoo_ids: "{{ zoo_ids | combine({item: index}) }}"
    index: "{{ index | int + 1 }}"
  with_items: "{{ zookeeperls | default([]) }}"

- name: Reset the index
  set_fact:
    index: 1

- name: Generate kafka broker ids
  set_fact:
    kafka_ids: "{{ kafka_ids | combine({item: index}) }}"
    index: "{{ index | int + 1 }}"
  with_items: "{{ kafkals | default([]) }}"

- name: Get all peer object list
  set_fact:
    allpeers: |
      {{ allpeers | default([]) + [{'org':item.split('@')[1].split('.')[-1],
        'name':item.split('@')[1] | replace('.', '-'),
        'role':item.split('@')[0]}] }}
  with_items: "{{ peerls }}"

- name: Get all ca object list
  set_fact:
    allcas: |
      {{ allcas | default([]) + [{ 'org':item.split('.')[-1],
        'name':item | replace('.', '-') }] }}
  with_items: "{{ cals }}"

- name: Get all orderer object list
  set_fact:
    allorderers: |
      {{ allorderers | default([]) + [{ 'org':item.split('.')[-1],
        'name':item | replace('.', '-') }] }}
  with_items: "{{ ordererls }}"

- name: Query k8s storage class
  command: >-
    ./kubectl --kubeconfig kubeconfig get storageclass
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  register: classes

- name: Set storage class
  set_fact:
    storageclass: "{{ (classes.stderr.find('No resources found') >= 0) | ternary('', 'default') }}"
    
- name: Create deployment files
  template:
    src: "{{ playbook_dir }}/../deploy_k8s/fabricsetup/templates/{{ item }}.j2"
    dest: "{{ playbook_dir }}/../../run/{{ item }}.yaml"
  with_items:
    - pvc
    - certssetup

- name: Create persistent volume
  command: >-
    ./kubectl --kubeconfig kubeconfig apply -f ../run/pvc.yaml 
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  tags: "createpvc"

- name: Query PVC status
  command: >-
    ./kubectl --kubeconfig kubeconfig get -o=custom-columns=STATUS:.status.phase
    pvc fabriccerts
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  register: pvcstatus
  until: pvcstatus.stdout.find("Bound") >= 0
  retries: 5
  delay: 10
  tags: "querypvc"
    
- name: Create certs volume initialization pod
  command: >-
    ./kubectl --kubeconfig kubeconfig apply -f ../run/certssetup.yaml 
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  tags: "createpvc"

- name: Query initialization container status
  command: >-
    ./kubectl --kubeconfig kubeconfig get -o=custom-columns=STATUS:.status.phase
    pod fabriccertspod
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  register: pvcstatus
  until: pvcstatus.stdout.find("Running") >= 0
  retries: 5
  delay: 10
  tags: "querypvc"
  
- name: Copy certs onto the persistent volume
  command: >-
    ./kubectl --kubeconfig kubeconfig cp ../run/certssetup.yaml fabriccertspod:/fabriccerts
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  tags: "placecerts"
