---
- name: Reuse common code
  include_tasks: "{{ playbook_dir }}/../common/config_apply.yml"

- meta: end_play
  when: (allorderers | length == 0) or (allpeers | length == 0)

- name: Setup few variables
  set_fact:
    alladmin: ""
    networkname: "{{ lookup('env', 'NETWORKNAME') | default('') }}"

- name: Process networkname
  set_fact:
    networkname: "{{ ((networkname|length)==0)|ternary('carauction-network', networkname) }}"

- name: Generate all admin options
  set_fact:
    alladmin: "{{ alladmin + '-A ' + item + 'NetworkAdmin -C /home/composer/.composer/' + item + 'NetworkAdmin/admin-pub.pem ' }}"
  with_items: "{{ peerorgs }}"
  tags: "generatealladmin"

- name: Create deployment file for composer cli
  template:
    src: "{{ playbook_dir }}/composersetup/templates/{{ item }}.j2"
    dest: "{{ playbook_dir }}/../../run/{{ item }}.yaml"
  with_items:
    - composercli
    - composerplayground

- name: Create composer cli initialization pod
  command: >-
    ./kubectl --kubeconfig kubeconfig apply -f ../run/composercli.yaml
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  tags: "createcomposerclipod"

- name: Wait for composer cli pod to be ready
  command: >-
    ./kubectl --kubeconfig kubeconfig -o=custom-columns=STATUS:.status.phase
    get pods -l type=composercli --no-headers --field-selector=status.phase=Running
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  register: podstatus
  until: podstatus.stdout_lines | length == 1
  retries: 10
  delay: 5

- name: Clean composer root
  command: >-
    ./kubectl --kubeconfig kubeconfig exec composercli
    -- /bin/rm -rf /home/composer/.composer/{{ item }}
  with_items:
    - "cards"
    - "client-data"
    - "*Admin*"
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  tags: "cleanroot"

- name: Create bussiness network cards
  command: >-
    ./kubectl --kubeconfig kubeconfig exec composercli -- composer card create
    -p /fabriccerts/keyfiles/{{ item }}/connection.json
    -c /fabriccerts/keyfiles/{{ item }}/users/Admin@{{ item }}/msp/admincerts/Admin@{{ item }}-cert.pem
    -k /fabriccerts/keyfiles/{{ item }}/users/Admin@{{ item }}/msp/keystore/admin_private.key
    -r PeerAdmin -r ChannelAdmin
    -u PeerAdmin
    -f /home/composer/.composer/PeerAdmin@{{ networkname }}-{{ item }}.card
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  with_items: "{{ peerorgs }}"
  tags: "createcards"

- name: Import the cards
  command: >-
    ./kubectl --kubeconfig kubeconfig exec composercli -- composer card import
    -f /home/composer/.composer/PeerAdmin@{{ networkname }}-{{ item }}.card
    -c PeerAdmin@{{ networkname }}-{{ item }}
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  with_items: "{{ peerorgs }}"
  tags: "importcards"

- name: Retrieve business network version
  command: >-
    ./kubectl --kubeconfig kubeconfig exec composercli -- composer archive list
    -a /fabriccerts/keyfiles/{{ networkname }}.bna
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  register: networkversion
  tags: "networkversion"

- name: Get network version string
  set_fact:
    networkver: |
      {{ networkversion.stdout_lines[3].split(':')[1] }}

- name: Network install
  command: >-
    ./kubectl --kubeconfig kubeconfig exec composercli -- composer network install
    -c PeerAdmin@{{ networkname }}-{{ item }}
    -a /fabriccerts/keyfiles/{{ networkname }}.bna
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  with_items: "{{ peerorgs }}"
  tags: "networkinstall"

- name: Request identity
  command: >-
    ./kubectl --kubeconfig kubeconfig exec composercli -- composer identity request
    -c PeerAdmin@{{ networkname }}-{{ item }}
    -u {{ fabric.ca.admin }} -s {{ fabric.ca.adminpw }}
    -d /home/composer/.composer/{{ item }}NetworkAdmin
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  with_items: "{{ peerorgs }}"
  tags: "requestidentity"

- name: Start network
  command: >-
    ./kubectl --kubeconfig kubeconfig exec composercli -- composer network start
    -c PeerAdmin@{{ networkname }}-{{ peerorgs[0] }}
    -n {{ networkname }} -V {{ networkver }}
    -o endorsementPolicyFile=/fabriccerts/keyfiles/policy.json {{ alladmin }}
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  tags: "startnetwork"

- name: Create admin business cards
  command: >-
    ./kubectl --kubeconfig kubeconfig exec composercli -- composer card create
    -p /fabriccerts/keyfiles/{{ item }}/connection.json
    -u {{ item }}NetworkAdmin -n {{ networkname }}
    -c /home/composer/.composer/{{ item }}NetworkAdmin/admin-pub.pem
    -k /home/composer/.composer/{{ item }}NetworkAdmin/admin-priv.pem
    -f /home/composer/.composer/{{ item }}NetworkAdmin/{{ item }}-{{ networkname }}-Admin.card
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  with_items: "{{ peerorgs }}"
  tags: "createadmincards"

- name: Import the admin cards
  command: >-
    ./kubectl --kubeconfig kubeconfig exec composercli -- composer card import
    -f /home/composer/.composer/{{ item }}NetworkAdmin/{{ item }}-{{ networkname }}-Admin.card
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  with_items: "{{ peerorgs }}"
  tags: "importadmincards"

- name: Ping network
  command: >-
    ./kubectl --kubeconfig kubeconfig exec composercli -- composer network ping
    -c {{ item }}NetworkAdmin@{{ networkname }}
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  with_items: "{{ peerorgs }}"
  tags: "pingnetwork"

- name: Start composer playground pod and service
  command: >-
    ./kubectl --kubeconfig kubeconfig apply -f ../run/composerplayground.yaml
  args:
    chdir: "{{ playbook_dir }}/../../vars/"
  tags: "startupplayground"
